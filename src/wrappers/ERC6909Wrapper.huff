/* Imports */
#include '../ERC6909.huff'
#include '../../lib/huffmate/src/math/SafeMath.huff'
#include "../../lib/huffmate/src/utils/CommonErrors.huff"

#define function mint(address account, uint256 tokenId, uint256 amount, bytes data) payable returns()

/* Wrapper Macros */
#define macro BALANCE_OF_WRAPPER() = takes (0) returns (0) {
    0x24 calldataload                            // [tokenId]
    0x04 calldataload                            // [account, tokenId]

    BALANCE_OF()                                 // [balance]
    push0 mstore                                 // [] store into mem
    0x20 push0 return                            // [] return 32 bytes
 }

#define macro TOTAL_SUPPLY_WRAPPER() = takes (0) returns (0) {
    0x04 calldataload                            // [tokenId]

    TOTAL_SUPPLY()                               // [balance]

    push0 mstore                                 // [] store into mem
    0x20 push0 return                            // [] return 32 bytes
 }

/// @title Mint (helper method)
/// @notice Mint a token to the given account
/// @notice This method does NOT validate caller. 
/// @notice Increase the balance of the msg.sender for the given tokenId and amount.
/// @param {calldata} [uint256 account, uint256 tokenId, uint256 amount, bytes data]
/// @return []
#define macro MINT_WRAPPER() = takes (0) returns (0) {
    // increase the balance of the address
    0x44 calldataload               // [amount]
    0x24 calldataload               // [tokenId, amount]
    0x04 calldataload               // [to, tokenId, amount]

    // Increase the balance of the to account
    [BALANCE_LOCATION]              // [&balance, to, tokenId, amount]
    GET_SLOT_FROM_KEYS_2D(push0)    // [slot, amount]
    dup1                            // [slot, slot,amount]
    sload                           // [bal, slot, amount]
    swap1                           // [slot, bal, amount]
    swap2                           // [amount, bal, slot]
    // calc and store new balance 
    SAFE_ADD()                      // [(bal+amount), slot]

    swap1                           // [slot, (bal+amount)]
    sstore                          // []

    0x24 calldataload              // [tokenId]
    
    // Increase total supply
    [SUPPLY_LOCATION]               // [tokenId, &totalSupply]
    GET_SLOT_FROM_KEY(push0)        // [slot]
    dup1                            // [slot, slot]
    sload                           // [totalSupply, slot]
    0x44 calldataload               // [amount, totalSupply, slot]
     // calc and store new supply 
    SAFE_ADD()                      // [(totalSupply+amount), slot]

    swap1                           // [slot, newTotalSupply]
    sstore                          // []
}


/* Function Dispatcher */
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    push0 calldataload 
    
    // Extract the function singature
    0xe0 shr

    // Jump table
    dup1 __FUNC_SIG(balanceOf)    eq  balanceOf      jumpi
    dup1 __FUNC_SIG(mint)         eq  mint           jumpi
    dup1 __FUNC_SIG(totalSupply)  eq  totalSupply    jumpi


    push0 push0 revert

    balanceOf:
        BALANCE_OF_WRAPPER()

    mint:
        MINT_WRAPPER()
    
    totalSupply:
        TOTAL_SUPPLY_WRAPPER()
}


