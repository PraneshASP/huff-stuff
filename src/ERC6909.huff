/// @title ERC6909
/// @notice SPDX-License-Identifier: MIT
/// @author PraneshASP <https://github.com/PraneshASP>
/// @notice Minimal, gas efficient ERC 6909 implementation
/// @notice Reference implemenatation: https://github.com/jtriley-eth/ERC-6909/blob/main/src/ERC6909.sol


#include "../lib/huffmate/src/auth/NonPayable.huff"
#include "../lib/huffmate/src/data-structures/Hashmap.huff"

// Function Interface
#define function totalSupply(uint256 id) nonpayable returns (uint256 amount)
#define function balanceOf(address owner, uint256 id) nonpayable returns (uint256 amount)
#define function isOperator(address owner, address spender) nonpayable returns (bool approved)
#define function allowance(address owner, address spender, uint256 id) nonpayable returns (uint256 amount)

#define function setOperator(address spender,uint256 approved) nonpayable returns ()
#define function transfer(address receiver, uint256 id, uint256 amount) payable returns (bool)
#define function approve(address spender, uint256 id, uint256 amount) nonpayable returns (bool)
#define function transferFrom(address sender, address receiver, uint256 id, uint256 amount) payable returns (bool)

// Events
#define event Approval(address indexed owner, address indexed spender, uint256 indexed id, uint256 amount)
#define event OperatorSet(address indexed owner, address indexed spender, uint256 approved)
#define event Transfer(address indexed sender, address indexed receiver, uint256 indexed id, uint256 amount)

// Storage Slots
#define constant SUPPLY_LOCATION = FREE_STORAGE_POINTER()
#define constant BALANCE_LOCATION = FREE_STORAGE_POINTER()
#define constant OPERATOR_LOCATION = FREE_STORAGE_POINTER()
#define constant ALLOWANCE_LOCATION = FREE_STORAGE_POINTER()

// Viewable Function Macros

/// @title Balance Of 
/// @notice Gets the balance of the token id for the given address
/// @param {calldata} [address owner, uint256 tokenId]
/// @return {return} [uint256 balance]
#define macro BALANCE_OF() = takes (0) returns (0) {
     // input stack: [owner, tokenId]
    [BALANCE_LOCATION]                              // [BALANCE_LOCATION, account, tokenId]
    LOAD_ELEMENT_FROM_KEYS_2D(0x00)                 // [balance]
}

/// @title Total supply 
/// @notice Gets the total supply of the given token id
/// @param {calldata} [uint256 tokenId]
/// @return {return} [uint256 supply]
#define macro TOTAL_SUPPLY() = takes (0) returns (0) {
     // input stack: [tokenId]
    [SUPPLY_LOCATION]                                // [SUPPLY_LOCATION, tokenId]
    LOAD_ELEMENT(0x00)                               // [totalSupply]
}

/// @title Is Operator 
/// @notice Checks if a spender is approved by an owner as an operator
/// @param {calldata} [address owner, address spender]
/// @return {return} [bool isOperator]
#define macro IS_OPERATOR() = takes (0) returns (0) {
     // input stack: [owner, spender]
    [OPERATOR_LOCATION]                             // [OPERATOR_LOCATION, owner, spender]
    LOAD_ELEMENT_FROM_KEYS_2D(push0)                 // [isOperator]
}

/// @title Allowance
/// @notice Checks the allowance granted to the spender for the given tokenId
/// @param {calldata} [address owner, address spender, uint256 tokenId]
/// @return {return} [uint256 amount]
#define macro ALLOWANCE() = takes (0) returns (0) {
     // input stack: [owner, spender, tokenId]
    [ALLOWANCE_LOCATION]                             // [ALLOWANCE_LOCATION, owner, spender, tokenId]
    LOAD_ELEMENT_FROM_KEYS_3D(push0)                 // [allowance]
}

/// @title Supports Interface
/// @notice Returns the supported ERC165 interface
/// @param {calldata} [bytes4 interfaceId]
/// @return [bool]
#define macro SUPPORTS_INTERFACE() = takes (0) returns(0) {
    0x04 calldataload
    dup1 0x01ffc9a7 eq isTrue jumpi
    dup1 0xd9b67a26 eq isTrue jumpi
    dup1 0x0e89341c eq isTrue jumpi
    
    push0

    push0 dup1 mstore
    0x20 push0 return

    isTrue:
        0x01 0x20 mstore
        0x20 push0 return
}
 
// Writable Function Macros

/// @title Set Operator 
/// @notice Sets or removes a spender as an operator for the caller.
/// @param {calldata} [address spender, bool approved]
/// @return {return} []
#define macro SET_OPERATOR() = takes (0) returns (0) {
    // input stack: [msg.sender, spender, approved]
    
    // for event
    dup3                                            // [approved]
    dup3 dup3                                       // [msg.sender, spender, approved, msg.sender, spender, approved]
    [OPERATOR_LOCATION]                             // [OPERATOR_LOCATION,  msg.sender, spender, approved, msg.sender, spender, approved]
    STORE_ELEMENT_FROM_KEYS_2D(0x00)                // [ msg.sender, spender, approved]
    
    dup3                                            // [approved, msg.sender, spender, approved]
    0x00 mstore                                     // [msg.sender, spender, approved]
    __EVENT_HASH(OperatorSet)                       // [sig, msg.sender, spender, approved]
    0x20 0x00 log3                                  // [approved]        
}

  
/// @title Approve
/// @notice Grants allowance to the spender for given tokenId
/// @param {calldata} [address spender, uint256 tokenId, uint256 amount]
/// @return {return} []
#define macro APPROVE() = takes (0) returns (0) {
    // input stack: [msg.sender, spender, tokenId, amount]
    
    // for event
    dup4 dup4                                       // [tokenId, amount, msg.sender, spender, tokenId, amount]
    dup4 dup4                                       // [ msg.sender, spender, tokenId, amount, msg.sender, spender, tokenId, amount]
    [ALLOWANCE_LOCATION]                            // [ALLOWANCE_LOCATION, msg.sender, spender, tokenId, amount, msg.sender, spender, tokenId, amount]
    STORE_ELEMENT_FROM_KEYS_3D(push0)               // [msg.sender, spender, tokenId, amount]
    
    dup4                                            // [amount, msg.sender, spender, tokenId, amount]
    0x00 mstore                                     // [msg.sender, spender, tokenId, amount]
    __EVENT_HASH(Approval)                          // [sig, msg.sender, spender, tokenId, amount]
    0x20 0x00 log4                                  // [amount]        
}